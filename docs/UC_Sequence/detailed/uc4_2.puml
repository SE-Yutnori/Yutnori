@startuml
control GameController
entity GameState
entity YutGameRules
boundary InGameView
entity Player

== 1. 누적 던지기 결과 수집 (handleNormalModeThrows) ==
GameController -> GameState: getCurrentPlayer()
note right: 현재 윷을 던질 Player 반환
activate GameState

GameState --> GameController: currentPlayer
deactivate GameState

GameController -> GameController: handleNormalModeThrows(currentPlayer, allResults)
note right:
activate YutGameRules

YutGameRules --> GameController: allResults
note left: 예: allResults = [5, 1] 또는 [4, 2, 3] 등
deactivate YutGameRules

== 2. 결과 재배열 필요 여부 판단 ==
alt allResults.size() == 1
    GameController -> GameController: orderedResults = allResults
    note right: 단일 던지기 결과 그대로 사용 (예: [2], [−1], [3] 등)
else
    GameController -> GameController: orderedResults = handleReorderResults(allResults, currentPlayer.getName())
    note right:
    activate GameController

    GameController -> InGameView: requestInput(request.getPromptMessage(), "윷 순서 재배열")
    note right:
    activate InGameView

    InGameView --> GameController: inputString
    note left: 사용자가 “1,5” 또는 “5,1” 입력
    deactivate InGameView

    GameController -> YutGameRules: validateReorderInput(inputString, allResults)
    note right: 성공 시 ReorderResult(reorderedList) 반환, 실패 시 에러 메시지
    activate YutGameRules

    YutGameRules --> GameController: ReorderResult(reorderedResults)
    note left:
    deactivate YutGameRules

    GameController -> GameController: orderedResults = reorderedResults
end

== 3. GameState에 이동 순서 저장 ==
GameController -> GameState: setRemainingMoves(orderedResults)
note right:
activate GameState

GameState --> GameController: (void)
deactivate GameState

== 4. 뷰에 최종 순서 표시 ==
GameController -> InGameView: showYutResult(orderedResults)
note right:

@enduml
